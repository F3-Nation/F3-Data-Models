"""adding postgres triggers for updated columns

Revision ID: be1c730cc2ef
Revises: b2db07a0e3a7
Create Date: 2025-05-05 16:28:27.517109

"""

from typing import Sequence, Union

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "be1c730cc2ef"
down_revision: Union[str, None] = "b2db07a0e3a7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        """
        CREATE OR REPLACE FUNCTION set_updated_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated = CURRENT_TIMESTAMP;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """
    )

    # install trigger on every table with an `updated` column
    for tbl in (
        "slack_spaces",
        "roles",
        "permissions",
        "orgs",
        "event_types",
        "event_tags",
        "locations",
        "events",
        "event_instances",
        "attendance_types",
        "attendance",
        "users",
        "slack_users",
        "positions",
        "expansions",
        "auth_accounts",
        "auth_sessions",
        "auth_verification_tokens",
        "update_requests",
        "achievements",
    ):
        op.execute(f"""
            CREATE TRIGGER set_updated_{tbl}
            BEFORE UPDATE ON {tbl}
            FOR EACH ROW EXECUTE FUNCTION set_updated_column();
        """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # drop all triggers
    for tbl in (
        "slack_spaces",
        "roles",
        "permissions",
        "orgs",
        "event_types",
        "event_tags",
        "locations",
        "events",
        "event_instances",
        "attendance_types",
        "attendance",
        "users",
        "slack_users",
        "positions",
        "expansions",
        "auth_accounts",
        "auth_sessions",
        "auth_verification_tokens",
        "update_requests",
        "achievements",
    ):
        op.execute(f"DROP TRIGGER IF EXISTS set_updated_{tbl} ON {tbl};")

    # drop the trigger function
    op.execute("DROP FUNCTION IF EXISTS set_updated_column();")
    # ### end Alembic commands ###
