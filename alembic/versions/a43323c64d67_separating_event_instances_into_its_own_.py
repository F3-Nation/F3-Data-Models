"""Separating event instances into its own table

Revision ID: a43323c64d67
Revises: 81a812f162bf
Create Date: 2025-04-04 08:55:10.525070

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a43323c64d67'
down_revision: Union[str, None] = '81a812f162bf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event_instances',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('series_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('highlight', sa.Boolean(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('start_time', sa.String(), nullable=True),
    sa.Column('end_time', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('pax_count', sa.Integer(), nullable=True),
    sa.Column('fng_count', sa.Integer(), nullable=True),
    sa.Column('preblast', sa.String(), nullable=True),
    sa.Column('backblast', sa.String(), nullable=True),
    sa.Column('preblast_rich', sa.JSON(), nullable=True),
    sa.Column('backblast_rich', sa.JSON(), nullable=True),
    sa.Column('preblast_ts', sa.Float(), nullable=True),
    sa.Column('backblast_ts', sa.Float(), nullable=True),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text("timezone('utc', now())"), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text("timezone('utc', now())"), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['orgs.id'], ),
    sa.ForeignKeyConstraint(['series_id'], ['events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_event_instances_is_active', 'event_instances', ['is_active'], unique=False)
    op.create_index('idx_event_instances_location_id', 'event_instances', ['location_id'], unique=False)
    op.create_index('idx_event_instances_org_id', 'event_instances', ['org_id'], unique=False)
    op.create_table('event_instances_x_event_types',
    sa.Column('event_instance_id', sa.Integer(), nullable=False),
    sa.Column('event_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_instance_id'], ['event_instances.id'], ),
    sa.ForeignKeyConstraint(['event_type_id'], ['event_types.id'], ),
    sa.PrimaryKeyConstraint('event_instance_id', 'event_type_id')
    )
    op.create_table('event_tags_x_event_instances',
    sa.Column('event_instance_id', sa.Integer(), nullable=False),
    sa.Column('event_tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_instance_id'], ['event_instances.id'], ),
    sa.ForeignKeyConstraint(['event_tag_id'], ['event_tags.id'], ),
    sa.PrimaryKeyConstraint('event_instance_id', 'event_tag_id')
    )
    op.add_column('attendance', sa.Column('event_instance_id', sa.Integer(), nullable=False))
    op.drop_constraint('attendance_event_id_user_id_is_planned_key', 'attendance', type_='unique')
    op.create_unique_constraint('attendance_event_instance_id_user_id_is_planned_key', 'attendance', ['event_instance_id', 'user_id', 'is_planned'])
    op.drop_constraint('attendance_event_id_fkey', 'attendance', type_='foreignkey')
    op.create_foreign_key('event_instance_id_fkey', 'attendance', 'event_instances', ['event_instance_id'], ['id'])
    op.drop_column('attendance', 'event_id')
    op.drop_column('events', 'preblast')
    op.drop_column('events', 'pax_count')
    op.drop_column('events', 'backblast_rich')
    op.drop_column('events', 'backblast')
    op.drop_column('events', 'preblast_rich')
    op.drop_column('events', 'fng_count')
    op.drop_column('events', 'preblast_ts')
    op.drop_column('events', 'is_series')
    op.drop_column('events', 'backblast_ts')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('events', sa.Column('backblast_ts', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('is_series', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('events', sa.Column('preblast_ts', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('fng_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('preblast_rich', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('backblast', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('backblast_rich', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('pax_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('preblast', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('attendance', sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint('event_instance_id_fkey', 'attendance', type_='foreignkey')
    op.create_foreign_key('attendance_event_id_fkey', 'attendance', 'events', ['event_id'], ['id'])
    op.drop_constraint('attendance_event_instance_id_user_id_is_planned_key', 'attendance', type_='unique')
    op.create_unique_constraint('attendance_event_id_user_id_is_planned_key', 'attendance', ['event_id', 'user_id', 'is_planned'])
    op.drop_column('attendance', 'event_instance_id')
    op.drop_table('event_tags_x_event_instances')
    op.drop_table('event_instances_x_event_types')
    op.drop_index('idx_event_instances_org_id', table_name='event_instances')
    op.drop_index('idx_event_instances_location_id', table_name='event_instances')
    op.drop_index('idx_event_instances_is_active', table_name='event_instances')
    op.drop_table('event_instances')
    # ### end Alembic commands ###
