"""simplified achievements, org_types, event_categories, and cadence

Revision ID: 4e0673582e75
Revises: daf2164fbff4
Create Date: 2025-02-14 06:43:07.216764

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "4e0673582e75"
down_revision: Union[str, None] = "daf2164fbff4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("weekly", "monthly", name="event_cadence").create(op.get_bind())
    sa.Enum("first_f", "second_f", "third_f", name="event_category").create(
        op.get_bind()
    )
    sa.Enum("ao", "region", "area", "sector", "nation", name="org_type").create(
        op.get_bind()
    )
    op.add_column(
        "achievements", sa.Column("specific_org_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(None, "achievements", "orgs", ["specific_org_id"], ["id"])
    op.add_column(
        "event_types",
        sa.Column("event_category", sa.VARCHAR(), nullable=True),
    )
    op.execute(
        "UPDATE event_types SET event_category = 'first_f' WHERE category_id IN (1, 2, 3)"
    )
    op.execute(
        "UPDATE event_types SET event_category = 'second_f' WHERE category_id = 4"
    )
    op.execute(
        "UPDATE event_types SET event_category = 'third_f' WHERE category_id = 5"
    )
    op.alter_column(
        "event_types",
        "event_category",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("first_f", "second_f", "third_f", name="event_category"),
        nullable=False,
        postgresql_using="event_category::event_category",
    )
    op.drop_constraint(
        "event_types_category_id_fkey", "event_types", type_="foreignkey"
    )
    op.drop_column("event_types", "category_id")
    op.alter_column(
        "events",
        "recurrence_pattern",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("weekly", "monthly", name="event_cadence"),
        existing_nullable=True,
        postgresql_using="recurrence_pattern::event_cadence",
    )
    op.add_column("orgs", sa.Column("org_type", sa.VARCHAR(), nullable=True))
    op.execute("UPDATE orgs SET org_type = 'ao' WHERE org_type_id = 1")
    op.execute("UPDATE orgs SET org_type = 'region' WHERE org_type_id = 2")
    op.execute("UPDATE orgs SET org_type = 'area' WHERE org_type_id = 3")
    op.execute("UPDATE orgs SET org_type = 'sector' WHERE org_type_id = 4")
    op.execute("UPDATE orgs SET org_type = 'nation' WHERE org_type_id = 5")
    op.alter_column(
        "orgs",
        "org_type",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("ao", "region", "area", "sector", "nation", name="org_type"),
        nullable=False,
        postgresql_using="org_type::org_type",
    )
    op.drop_constraint("orgs_org_type_id_fkey", "orgs", type_="foreignkey")
    op.drop_column("orgs", "org_type_id")
    op.add_column(
        "positions",
        sa.Column("org_type", sa.VARCHAR(), nullable=True),
    )
    op.execute("UPDATE positions SET org_type = 'ao' WHERE org_type_id = 1")
    op.execute("UPDATE positions SET org_type = 'region' WHERE org_type_id = 2")
    op.execute("UPDATE positions SET org_type = 'area' WHERE org_type_id = 3")
    op.execute("UPDATE positions SET org_type = 'sector' WHERE org_type_id = 4")
    op.execute("UPDATE positions SET org_type = 'nation' WHERE org_type_id = 5")
    op.alter_column(
        "positions",
        "org_type",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("ao", "region", "area", "sector", "nation", name="org_type"),
        nullable=True,
        postgresql_using="org_type::org_type",
    )
    op.drop_constraint("positions_org_type_id_fkey", "positions", type_="foreignkey")
    op.drop_column("positions", "org_type_id")
    op.alter_column(
        "update_requests",
        "location_lat",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=8, decimal_return_scale=5),
        existing_nullable=True,
    )
    op.alter_column(
        "update_requests",
        "location_lng",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=8, decimal_return_scale=5),
        existing_nullable=True,
    )
    op.drop_table("achievements_x_org")
    op.drop_table("event_categories")
    op.drop_table("org_types")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "update_requests",
        "location_lng",
        existing_type=sa.Float(precision=8, decimal_return_scale=5),
        type_=sa.REAL(),
        existing_nullable=True,
    )
    op.alter_column(
        "update_requests",
        "location_lat",
        existing_type=sa.Float(precision=8, decimal_return_scale=5),
        type_=sa.REAL(),
        existing_nullable=True,
    )
    op.add_column(
        "positions",
        sa.Column("org_type_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.create_foreign_key(
        "positions_org_type_id_fkey", "positions", "org_types", ["org_type_id"], ["id"]
    )
    op.drop_column("positions", "org_type")
    op.add_column(
        "orgs",
        sa.Column("org_type_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "orgs_org_type_id_fkey", "orgs", "org_types", ["org_type_id"], ["id"]
    )
    op.drop_column("orgs", "org_type")
    op.alter_column(
        "events",
        "recurrence_pattern",
        existing_type=sa.Enum("weekly", "monthly", name="event_cadence"),
        type_=sa.VARCHAR(),
        existing_nullable=True,
    )
    op.add_column(
        "event_types",
        sa.Column("category_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "event_types_category_id_fkey",
        "event_types",
        "event_categories",
        ["category_id"],
        ["id"],
    )
    op.drop_column("event_types", "event_category")
    op.drop_constraint(None, "achievements", type_="foreignkey")
    op.drop_column("achievements", "specific_org_id")
    op.create_table(
        "org_types",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('org_types_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, now())"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, now())"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="org_types_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "event_categories",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, now())"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, now())"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="event_categories_pkey"),
    )
    op.create_table(
        "achievements_x_org",
        sa.Column("achievement_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("org_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["achievement_id"],
            ["achievements.id"],
            name="achievements_x_org_achievement_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["org_id"], ["orgs.id"], name="achievements_x_org_org_id_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "achievement_id", "org_id", name="achievements_x_org_pkey"
        ),
    )
    sa.Enum("ao", "region", "area", "sector", "nation", name="org_type").drop(
        op.get_bind()
    )
    sa.Enum("first_f", "second_f", "third_f", name="event_category").drop(op.get_bind())
    sa.Enum("weekly", "monthly", name="event_cadence").drop(op.get_bind())
    # ### end Alembic commands ###
