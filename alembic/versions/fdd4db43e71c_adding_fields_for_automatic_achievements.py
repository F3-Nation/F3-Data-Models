"""adding fields for automatic achievements

Revision ID: fdd4db43e71c
Revises: 59f8518b05a0
Create Date: 2025-06-08 06:53:31.878235

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "fdd4db43e71c"
down_revision: Union[str, None] = "59f8518b05a0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("weekly", "monthly", "quarterly", "yearly", name="achievement_cadence").create(op.get_bind())
    op.add_column("achievements", sa.Column("auto_award", sa.Boolean(), server_default="false", nullable=False))
    op.add_column("achievements", sa.Column("is_active", sa.Boolean(), server_default="true", nullable=False))
    op.add_column(
        "achievements",
        sa.Column(
            "auto_cadence",
            postgresql.ENUM("weekly", "monthly", "quarterly", "yearly", name="achievement_cadence", create_type=False),
            nullable=True,
        ),
    )
    op.add_column("achievements", sa.Column("auto_threshold", sa.Integer(), nullable=True))
    op.add_column(
        "achievements",
        sa.Column("auto_event_type_ids_include", sa.ARRAY(sa.Integer(), as_tuple=True, dimensions=1), nullable=True),
    )
    op.add_column(
        "achievements",
        sa.Column("auto_event_type_ids_exclude", sa.ARRAY(sa.Integer(), as_tuple=True, dimensions=1), nullable=True),
    )
    op.add_column(
        "achievements",
        sa.Column("auto_event_tag_ids_include", sa.ARRAY(sa.Integer(), as_tuple=True, dimensions=1), nullable=True),
    )
    op.add_column(
        "achievements",
        sa.Column("auto_event_tag_ids_exclude", sa.ARRAY(sa.Integer(), as_tuple=True, dimensions=1), nullable=True),
    )
    op.add_column(
        "achievements",
        sa.Column(
            "auto_event_categories_include",
            sa.ARRAY(
                postgresql.ENUM("first_f", "second_f", "third_f", name="event_category", create_type=False),
                as_tuple=True,
                dimensions=1,
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "achievements",
        sa.Column(
            "auto_event_categories_exclude",
            sa.ARRAY(
                postgresql.ENUM("first_f", "second_f", "third_f", name="event_category", create_type=False),
                as_tuple=True,
                dimensions=1,
            ),
            nullable=True,
        ),
    )
    op.add_column("achievements", sa.Column("auto_custom_sql", sa.String(), nullable=True))
    op.add_column("achievements", sa.Column("meta", sa.JSON(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("achievements", "meta")
    op.drop_column("achievements", "auto_custom_sql")
    op.drop_column("achievements", "auto_event_categories_exclude")
    op.drop_column("achievements", "auto_event_categories_include")
    op.drop_column("achievements", "auto_event_tag_ids_exclude")
    op.drop_column("achievements", "auto_event_tag_ids_include")
    op.drop_column("achievements", "auto_event_type_ids_exclude")
    op.drop_column("achievements", "auto_event_type_ids_include")
    op.drop_column("achievements", "auto_threshold")
    op.drop_column("achievements", "auto_cadence")
    op.drop_column("achievements", "is_active")
    op.drop_column("achievements", "auto_award")
    sa.Enum("weekly", "monthly", "quarterly", "yearly", name="achievement_cadence").drop(op.get_bind())
    # ### end Alembic commands ###
