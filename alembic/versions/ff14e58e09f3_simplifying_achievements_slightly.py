"""Simplifying Achievements Slightly

Revision ID: ff14e58e09f3
Revises: fdd4db43e71c
Create Date: 2025-07-09 07:59:43.628576

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "ff14e58e09f3"
down_revision: Union[str, None] = "fdd4db43e71c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("posts", "unique_aos", name="achievement_threshold_type").create(op.get_bind())
    op.add_column(
        "achievements",
        sa.Column(
            "auto_threshold_type",
            postgresql.ENUM("posts", "unique_aos", name="achievement_threshold_type", create_type=False),
            nullable=True,
        ),
    )
    op.add_column("achievements", sa.Column("auto_filters", sa.JSON(), nullable=True))
    op.drop_column("achievements", "auto_event_type_ids_include")
    op.drop_column("achievements", "auto_event_categories_exclude")
    op.drop_column("achievements", "auto_event_tag_ids_exclude")
    op.drop_column("achievements", "verb")
    op.drop_column("achievements", "auto_event_categories_include")
    op.drop_column("achievements", "auto_custom_sql")
    op.drop_column("achievements", "auto_event_type_ids_exclude")
    op.drop_column("achievements", "auto_event_tag_ids_include")
    op.alter_column(
        "slack_users",
        "slack_updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.Integer(),
        existing_nullable=True,
        postgresql_using="CAST(EXTRACT(EPOCH FROM slack_updated) AS INTEGER)",
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="achievement_cadence",
        new_values=["weekly", "monthly", "quarterly", "yearly", "lifetime"],
        affected_columns=[TableReference(table_schema="public", table_name="achievements", column_name="auto_cadence")],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="achievement_cadence",
        new_values=["weekly", "monthly", "quarterly", "yearly"],
        affected_columns=[TableReference(table_schema="public", table_name="achievements", column_name="auto_cadence")],
        enum_values_to_rename=[],
    )
    op.alter_column(
        "slack_users",
        "slack_updated",
        existing_type=sa.Integer(),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        postgresql_using="TO_TIMESTAMP(slack_updated) AT TIME ZONE 'UTC'",
    )
    op.add_column(
        "achievements",
        sa.Column("auto_event_tag_ids_include", postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "achievements",
        sa.Column("auto_event_type_ids_exclude", postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    )
    op.add_column("achievements", sa.Column("auto_custom_sql", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "achievements",
        sa.Column(
            "auto_event_categories_include",
            postgresql.ARRAY(
                postgresql.ENUM("first_f", "second_f", "third_f", name="event_category", create_type=False)
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "achievements", sa.Column("verb", sa.VARCHAR(), autoincrement=False, nullable=False, server_default="")
    )
    op.add_column(
        "achievements",
        sa.Column("auto_event_tag_ids_exclude", postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "achievements",
        sa.Column(
            "auto_event_categories_exclude",
            postgresql.ARRAY(
                postgresql.ENUM("first_f", "second_f", "third_f", name="event_category", create_type=False)
            ),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "achievements",
        sa.Column("auto_event_type_ids_include", postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    )
    op.drop_column("achievements", "auto_filters")
    op.drop_column("achievements", "auto_threshold_type")
    sa.Enum("posts", "unique_aos", name="achievement_threshold_type").drop(op.get_bind())
    # ### end Alembic commands ###
