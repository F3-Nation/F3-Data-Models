"""matching updates from maps team

Revision ID: dd60768a20e2
Revises: 3796f642e38d
Create Date: 2025-02-12 16:00:52.191193

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "dd60768a20e2"
down_revision: Union[str, None] = "3796f642e38d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("pending", "approved", "rejected", name="update_request_status").create(
        op.get_bind()
    )
    sa.Enum("user", "editor", "admin", name="user_role").create(op.get_bind())
    sa.Enum("active", "inactive", "deleted", name="user_status").create(op.get_bind())
    sa.Enum("user", "editor", "admin", name="region_role").create(op.get_bind())
    op.create_table(
        "auth_verification_tokens",
        sa.Column("identifier", sa.VARCHAR(), nullable=False),
        sa.Column("token", sa.VARCHAR(), nullable=False),
        sa.Column("expires", sa.Date(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("identifier", "token"),
    )
    op.create_table(
        "auth_accounts",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("provider", sa.VARCHAR(), nullable=False),
        sa.Column("provider_account_id", sa.VARCHAR(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column("access_token", sa.String(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("token_type", sa.String(), nullable=True),
        sa.Column("scope", sa.String(), nullable=True),
        sa.Column("id_token", sa.String(), nullable=True),
        sa.Column("session_state", sa.String(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("provider", "provider_account_id"),
    )
    op.create_table(
        "auth_sessions",
        sa.Column("session_token", sa.TEXT(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("expires", sa.Date(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("session_token"),
    )
    op.create_table(
        "update_requests",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("token", sa.UUID(), nullable=False),
        sa.Column("region_id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=True),
        sa.Column("event_type_ids", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("event_tag", sa.String(), nullable=True),
        sa.Column("event_series_id", sa.Integer(), nullable=True),
        sa.Column("event_is_series", sa.Boolean(), nullable=True),
        sa.Column("event_is_active", sa.Boolean(), nullable=True),
        sa.Column("event_highlight", sa.Boolean(), nullable=True),
        sa.Column("event_start_date", sa.Date(), nullable=True),
        sa.Column("event_end_date", sa.Date(), nullable=True),
        sa.Column("event_start_time", sa.Time(), nullable=True),
        sa.Column("event_end_time", sa.Time(), nullable=True),
        sa.Column("event_day_of_week", sa.VARCHAR(length=30), nullable=True),
        sa.Column("event_name", sa.String(), nullable=False),
        sa.Column("event_description", sa.String(), nullable=True),
        sa.Column("event_recurrence_pattern", sa.VARCHAR(length=30), nullable=True),
        sa.Column("event_recurrence_interval", sa.Integer(), nullable=True),
        sa.Column("event_index_within_interval", sa.Integer(), nullable=True),
        sa.Column("event_meta", sa.JSON(), nullable=True),
        sa.Column("event_contact_email", sa.String(), nullable=True),
        sa.Column("location_name", sa.String(), nullable=True),
        sa.Column("location_description", sa.String(), nullable=True),
        sa.Column("location_address", sa.String(), nullable=True),
        sa.Column("location_address2", sa.String(), nullable=True),
        sa.Column("location_city", sa.String(), nullable=True),
        sa.Column("location_state", sa.String(), nullable=True),
        sa.Column("location_zip", sa.String(), nullable=True),
        sa.Column("location_country", sa.String(), nullable=True),
        sa.Column(
            "location_lat", sa.Float(precision=8, decimal_return_scale=5), nullable=True
        ),
        sa.Column(
            "location_lng", sa.Float(precision=8, decimal_return_scale=5), nullable=True
        ),
        sa.Column("location_id", sa.Integer(), nullable=True),
        sa.Column("location_contact_email", sa.String(), nullable=True),
        sa.Column("ao_logo", sa.String(), nullable=True),
        sa.Column("submitted_by", sa.String(), nullable=False),
        sa.Column("submitter_validated", sa.Boolean(), nullable=True),
        sa.Column("reviewed_by", sa.String(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "pending",
                "approved",
                "rejected",
                name="update_request_status",
                create_type=False,
            ),
            nullable=False,
            server_default="pending",
        ),
        sa.Column("meta", sa.JSON(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["region_id"],
            ["orgs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.alter_column(
        "roles",
        "name",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("user", "editor", "admin", name="region_role"),
        existing_nullable=False,
        postgresql_using="name::region_role",
    )
    op.add_column("users", sa.Column("email_verified", sa.DateTime(), nullable=True))
    op.add_column(
        "users",
        sa.Column(
            "status",
            postgresql.ENUM(
                "active", "inactive", "deleted", name="user_status", create_type=False
            ),
            nullable=False,
            server_default="active",
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "role",
            postgresql.ENUM(
                "user", "editor", "admin", name="user_role", create_type=False
            ),
            nullable=False,
            server_default="user",
        ),
    )
    op.drop_column("users", "email_verified_ts")
    op.alter_column(
        "events",
        "start_time",
        existing_type=sa.TIME(timezone=False),
        type_=sa.Time(True),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "end_time",
        existing_type=sa.TIME(timezone=False),
        type_=sa.Time(True),
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "email_verified_ts",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_column("users", "role")
    op.drop_column("users", "status")
    op.drop_column("users", "email_verified")
    op.alter_column(
        "roles",
        "name",
        existing_type=sa.Enum("user", "editor", "admin", name="region_role"),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.drop_table("update_requests")
    op.drop_table("auth_sessions")
    op.drop_table("auth_accounts")
    op.drop_table("auth_verification_tokens")
    sa.Enum("user", "editor", "admin", name="region_role").drop(op.get_bind())
    sa.Enum("active", "inactive", "deleted", name="user_status").drop(op.get_bind())
    sa.Enum("user", "editor", "admin", name="user_role").drop(op.get_bind())
    sa.Enum("pending", "approved", "rejected", name="update_request_status").drop(
        op.get_bind()
    )
    op.alter_column(
        "events",
        "end_time",
        existing_type=sa.Time(True),
        type_=sa.TIME(),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "start_time",
        existing_type=sa.Time(True),
        type_=sa.TIME(),
        existing_nullable=True,
    )
    # ### end Alembic commands ###
