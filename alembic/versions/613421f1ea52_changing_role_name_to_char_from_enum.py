"""changing role name to char from enum

Revision ID: 613421f1ea52
Revises: e88b995c9b44
Create Date: 2025-08-11 11:52:13.601998

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "613421f1ea52"
down_revision: Union[str, None] = "e88b995c9b44"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.alter_column(
        "roles",
        "name",
        existing_type=postgresql.ENUM("user", "editor", "admin", name="region_role"),
        type_=sa.VARCHAR(),
        existing_nullable=False,
        postgresql_using="name::text",
    )
    op.create_unique_constraint(None, "roles", ["name"])
    sa.Enum("user", "editor", "admin", name="region_role").drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("user", "editor", "admin", name="region_role").create(op.get_bind())
    op.drop_constraint(None, "roles", type_="unique")
    op.alter_column(
        "roles",
        "name",
        existing_type=sa.VARCHAR(),
        type_=postgresql.ENUM("user", "editor", "admin", name="region_role"),
        existing_nullable=False,
        postgresql_using="name::text",
    )
    # ### end Alembic commands ###
