"""Adding codex tables from Roma

Revision ID: e88b995c9b44
Revises: 88f549c87890
Create Date: 2025-07-18 14:54:29.480202

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e88b995c9b44"
down_revision: Union[str, None] = "88f549c87890"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("pending", "approved", "rejected", name="codex_submission_status").create(op.get_bind())
    op.create_table(
        "codex_entries",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("aliases", postgresql.JSONB(astext_type=sa.Text()), server_default="[]", nullable=True),
        sa.Column("video_link", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), server_default=sa.text("timezone('utc', now())"), nullable=False),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
            server_onupdate=sa.text("timezone('utc', now())"),
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "codex_tags",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("timezone('utc', now())"), nullable=False),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
            server_onupdate=sa.text("timezone('utc', now())"),
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "codex_entry_tags",
        sa.Column("entry_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["entry_id"], ["codex_entries.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tag_id"], ["codex_tags.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("entry_id", "tag_id"),
    )
    op.create_table(
        "codex_references",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("from_entry_id", sa.Integer(), nullable=False),
        sa.Column("to_entry_id", sa.Integer(), nullable=False),
        sa.Column("context", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), server_default=sa.text("timezone('utc', now())"), nullable=False),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
            server_onupdate=sa.text("timezone('utc', now())"),
        ),
        sa.ForeignKeyConstraint(["from_entry_id"], ["codex_entries.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["to_entry_id"], ["codex_entries.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "codex_user_submissions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("submission_type", sa.String(), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("submitter_name", sa.String(), nullable=True),
        sa.Column("submitter_email", sa.String(), nullable=True),
        sa.Column("submitter_user_id", sa.Integer(), nullable=True),
        sa.Column("timestamp", sa.DateTime(), server_default=sa.text("timezone('utc', now())"), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("pending", "approved", "rejected", name="codex_submission_status", create_type=False),
            nullable=False,
            server_default="pending",
        ),
        sa.Column("created", sa.DateTime(), server_default=sa.text("timezone('utc', now())"), nullable=False),
        sa.Column(
            "updated",
            sa.DateTime(),
            server_default=sa.text("timezone('utc', now())"),
            nullable=False,
            server_onupdate=sa.text("timezone('utc', now())"),
        ),
        sa.ForeignKeyConstraint(
            ["submitter_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("codex_user_submissions")
    op.drop_table("codex_references")
    op.drop_table("codex_entry_tags")
    op.drop_table("codex_tags")
    op.drop_table("codex_entries")
    sa.Enum("pending", "approved", "rejected", name="codex_submission_status").drop(op.get_bind())
    # ### end Alembic commands ###
