"""dropped users.role, times to notz, dayofweek to enum

Revision ID: daf2164fbff4
Revises: dd60768a20e2
Create Date: 2025-02-14 06:09:34.358936

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "daf2164fbff4"
down_revision: Union[str, None] = "dd60768a20e2"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # alter events.day_of_week to mapped varchar (0->monday, 1->tuesday, ...)
    op.execute(
        "ALTER TABLE events ALTER COLUMN day_of_week TYPE VARCHAR USING day_of_week::text"
    )
    op.execute("UPDATE events SET day_of_week = 'monday' WHERE day_of_week = '0'")
    op.execute("UPDATE events SET day_of_week = 'tuesday' WHERE day_of_week = '1'")
    op.execute("UPDATE events SET day_of_week = 'wednesday' WHERE day_of_week = '2'")
    op.execute("UPDATE events SET day_of_week = 'thursday' WHERE day_of_week = '3'")
    op.execute("UPDATE events SET day_of_week = 'friday' WHERE day_of_week = '4'")
    op.execute("UPDATE events SET day_of_week = 'saturday' WHERE day_of_week = '5'")
    op.execute("UPDATE events SET day_of_week = 'sunday' WHERE day_of_week = '6'")
    op.execute(
        "UPDATE update_requests SET event_day_of_week = 'monday' WHERE event_day_of_week = '0'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = 'tuesday' WHERE event_day_of_week = '1'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = 'wednesday' WHERE event_day_of_week = '2'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = 'thursday' WHERE event_day_of_week = '3'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = 'friday' WHERE event_day_of_week = '4'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = 'saturday' WHERE event_day_of_week = '5'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = 'sunday' WHERE event_day_of_week = '6'"
    )
    sa.Enum(
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
        name="day_of_week",
    ).create(op.get_bind())
    op.alter_column(
        "events",
        "start_time",
        existing_type=postgresql.TIME(timezone=True),
        type_=sa.Time(),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "end_time",
        existing_type=postgresql.TIME(timezone=True),
        type_=sa.Time(),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "day_of_week",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum(
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            name="day_of_week",
        ),
        existing_nullable=True,
        postgresql_using="day_of_week::day_of_week",
    )
    op.alter_column(
        "update_requests",
        "event_day_of_week",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum(
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            name="day_of_week",
        ),
        existing_nullable=True,
        postgresql_using="event_day_of_week::day_of_week",
    )
    op.alter_column(
        "update_requests",
        "location_lat",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=8, decimal_return_scale=5),
        existing_nullable=True,
    )
    op.alter_column(
        "update_requests",
        "location_lng",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=8, decimal_return_scale=5),
        existing_nullable=True,
    )
    op.drop_column("users", "role")
    sa.Enum("user", "editor", "admin", name="user_role").drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("user", "editor", "admin", name="user_role").create(op.get_bind())
    op.add_column(
        "users",
        sa.Column(
            "role",
            postgresql.ENUM(
                "user", "editor", "admin", name="user_role", create_type=False
            ),
            server_default=sa.text("'user'::user_role"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.alter_column(
        "update_requests",
        "location_lng",
        existing_type=sa.Float(precision=8, decimal_return_scale=5),
        type_=sa.REAL(),
        existing_nullable=True,
    )
    op.alter_column(
        "update_requests",
        "location_lat",
        existing_type=sa.Float(precision=8, decimal_return_scale=5),
        type_=sa.REAL(),
        existing_nullable=True,
    )
    op.alter_column(
        "update_requests",
        "event_day_of_week",
        existing_type=sa.Enum(
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            name="day_of_week",
        ),
        type_=sa.VARCHAR(length=30),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "day_of_week",
        existing_type=sa.Enum(
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            name="day_of_week",
        ),
        type_=sa.VARCHAR(),
        existing_nullable=True,
    )
    op.execute("UPDATE events SET day_of_week = '0' WHERE day_of_week = 'monday'")
    op.execute("UPDATE events SET day_of_week = '1' WHERE day_of_week = 'tuesday'")
    op.execute("UPDATE events SET day_of_week = '2' WHERE day_of_week = 'wednesday'")
    op.execute("UPDATE events SET day_of_week = '3' WHERE day_of_week = 'thursday'")
    op.execute("UPDATE events SET day_of_week = '4' WHERE day_of_week = 'friday'")
    op.execute("UPDATE events SET day_of_week = '5' WHERE day_of_week = 'saturday'")
    op.execute("UPDATE events SET day_of_week = '6' WHERE day_of_week = 'sunday'")
    op.execute(
        "ALTER TABLE events ALTER COLUMN day_of_week TYPE INTEGER USING day_of_week::integer"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = '0' WHERE event_day_of_week = 'monday'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = '1' WHERE event_day_of_week = 'tuesday'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = '2' WHERE event_day_of_week = 'wednesday'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = '3' WHERE event_day_of_week = 'thursday'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = '4' WHERE event_day_of_week = 'friday'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = '5' WHERE event_day_of_week = 'saturday'"
    )
    op.execute(
        "UPDATE update_requests SET event_day_of_week = '6' WHERE event_day_of_week = 'sunday'"
    )
    op.alter_column(
        "events",
        "end_time",
        existing_type=sa.Time(),
        type_=postgresql.TIME(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "events",
        "start_time",
        existing_type=sa.Time(),
        type_=postgresql.TIME(timezone=True),
        existing_nullable=True,
    )
    sa.Enum(
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
        name="day_of_week",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
